version: 0.2
env:
  git-credential-helper: yes
phases:
  install:
    commands:
      - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      - chmod 700 get_helm.sh && ./get_helm.sh -v "$HELM_VERSION"
      - helm version
  pre_build:
    commands:
      - |

        docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"

  build:
    commands:
      - |


        setKubeconfigAndNs() {
          ENV=$1
          NS=$2

          ENV_SUB=$(echo $ENV | tr -  _)
          ENV_SUB=$(echo $ENV_SUB| tr '[:lower:]' '[:upper:]')
          ENV_KUBECONFIG_NAME="${ENV_SUB}_KUBECONFIG"

          ENV_KUBECONFIG_VALUE=$(eval "echo \$$ENV_KUBECONFIG_NAME")
          #echo "debug n:$ENV_KUBECONFIG_NAME d:$NS v:$ENV_KUBECONFIG_VALUE"

          if [ ! -d ~/.kube ]; then mkdir -p ~/.kube; fi

          if [ -z "${ENV_KUBECONFIG_VALUE}" ]; then
            case $ENV in
              eks-*)
                aws eks update-kubeconfig --name $EKS_NAME --region $AWS_DEFAULT_REGION
                ;;
              scw-*)
                vault kv get -mount=$PROJECT_NAME -field key "${VAULT_SECRET_PREFIX_AWS}/commonsecrets/kubeconfigs/${ENV}/rollout-kubeconfig" > ~/.kube/config || exit 1;
                ;;
            esac
          else
            echo "WARNING use custom kubeconfig value from env not from vault or eks profile"
            echo "${ENV_KUBECONFIG_VALUE}" > ~/.kube/config || exit 1;
          fi

          #kubectl config get-contexts
          echo "Setting context with NS:$NS"
          kubectl config set-context --current --namespace=$NS || exit 1;
        }

        getNamespace() {
            ENV=$1
            ENV_DEFAULT=$2

            ENV_SUB=$(echo $ENV | tr -  _)
            ENV_SUB=$(echo $ENV_SUB| tr '[:lower:]' '[:upper:]')
            ENV_NAME="${ENV_SUB}_NAMESPACE"

            ENV_VALUE=$(eval "echo \$$ENV_NAME")
            #echo "debug n:$ENV_NAME d:$ENV_DEFAULT v:$ENV_VALUE"
            if [ -z "${ENV_VALUE}" ]; then
              echo "$ENV_DEFAULT"
            else
              echo "$ENV_VALUE"
            fi
        }

        getSsmParams() {
          ENV_VALUE=$1
          SSM_PATH=$2
          if [ -z "${ENV_VALUE}" ]; then
            #echo "debug env_val:$ENV_VALUE ssm_val:$SSM_PATH"
            SSM_VALUE=$(aws ssm get-parameter --name "$SSM_PATH" --with-decryption --region eu-west-1  | jq -r .Parameter.Value) || exit 1;
            echo "$SSM_VALUE"
          else
            echo "$ENV_VALUE"
          fi
        }

        fetchSha(){
          IMG_REPO=$1
          # FIXME here it show error if the first fails but it's normal
          DIGEST=$(docker manifest inspect $IMG_REPO --verbose | jq '.Descriptor.digest' || docker manifest inspect $IMG_REPO | jq '.manifests[0].digest')
          #echo "digest:$DIGEST"
          TAG_SHA=$(echo -n "$DIGEST" | awk -F ':' '{print $2}' | cut -c 1-63 | tr -d $'\n') || exit 1;
          echo "$TAG_SHA"
        }

        helm_deploy(){
          SVC=$1
          SHA=$2
          CHART_PATH=$3
          VALUES_PATH=$4
          echo "Helm deploy for chart-path $CHART_PATH and values-path $VALUES_PATH"
          helm package ${CHART_PATH} -d /tmp --app-version $SHA || exit 1;
          helm upgrade $HELM_ADDITIONAL_OPTIONS -i $SVC /tmp/$SVC*.tgz --values ${VALUES_PATH} ${HELM_CHART_WAIT} || exit 1;
          rm -f /tmp/$SVC*.tgz || true;
        }
        setDashboardEnvironmentVarsBySvc(){
          SVC=$1

          HELM_CHART_PATH=${CODEBUILD_SRC_DIR_MONOREPO}/coordinator/kubernetes/production/helm/${SVC}
          HELM_VALUES_PATH=${CODEBUILD_SRC_DIR_MONOREPO}/coordinator/kubernetes/private-swarms/$PROJECT_NAME/helm/${SVC}_values.yaml
          IMG_REPO="cubbit/${SVC}:latest"

          if [ -z "${HELM_CHART_WAIT}" ]; then HELM_CHART_WAIT="--wait --timeout ${HELM_TIMEOUT}"; fi;
          echo "Helm chart wait-option to apply to env $ENV for the service $SVC: is: $HELM_CHART_WAIT"

        }

        echo ""
        echo "######################################"
        echo "# Rollout multi env"
        echo "######################################"
        SSM_ENABLED_ENVS_PATH=/$PROJECT_NAME/rollout-enabled-environments
        ENABLED_ENVS=$(getSsmParams "$MY_ENABLED_ENVS" $SSM_ENABLED_ENVS_PATH)
        if [ -z "$ENABLED_ENVS" ]; then
            echo "ENABLED_ENVS is empty"
        else
          for ENV in $(echo "${ENABLED_ENVS}" | tr "," "\n");
          do
            echo "-------------------------------"
            echo "Starting dashboard rollout for env ${ENV}"
            ROLLOUT_NS=$( getNamespace "${ENV}" "$NAMESPACE" )
            setKubeconfigAndNs "${ENV}" "$ROLLOUT_NS"

            SSM_ENABLED_SERVICES_BY_ENV_PATH=/$PROJECT_NAME/$ENV/dashboard/rollout-enabled-services
            echo "Fetching services list from env:'$MY_ENABLED_SERVICES' or from ssm path:'$SSM_ENABLED_SERVICES_BY_ENV_PATH'"
            ENABLED_SERVICES=$( getSsmParams "$MY_ENABLED_SERVICES" $SSM_ENABLED_SERVICES_BY_ENV_PATH )
            #echo "Fetched services list:'$ENABLED_SERVICES'"

            if [ -z "$ENABLED_SERVICES" ]; then
              echo "ENABLED_SERVICES list is empty"
            else
              for SERVICE in $(echo "$ENABLED_SERVICES" | tr "," "\n");
              do
                setDashboardEnvironmentVarsBySvc $SERVICE
                TAG_SHA=$(fetchSha "$IMG_REPO")
                echo "--SVC--"
                echo "Rollout dashboard service '${SERVICE}' with image repo '${IMG_REPO}' and tag '${TAG_SHA}' on ${ENV}" || exit 1;
                helm_deploy "$SERVICE" "$TAG_SHA" "$HELM_CHART_PATH" "$HELM_VALUES_PATH"
              done
            fi
          done
        fi

  post_build:
    commands:
      - if [ "$CODEBUILD_BUILD_SUCCEEDING" -eq "0" ]; then exit 1; fi
      - printf "Done."
